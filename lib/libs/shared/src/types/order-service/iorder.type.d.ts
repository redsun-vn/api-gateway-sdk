import { tags } from 'typia';
import { BaseResponse } from '../common.type';
import { ILineItem } from './iline-item.type';
import { CODStatus, OrderStatus, OrderFinancialStatus, OrderFulfillmentStatus, OrderProcessingStatus } from '../../enum';
import { IDrafOrder } from './idraf-order.type';
import { ITableReservation } from './itable-reservation.type';
export declare namespace IOrder {
    interface ICreateOrder {
        branch_id: number & tags.Type<'uint32'>;
        staff_id: number & tags.Type<'uint32'>;
        pos_session_id?: number & tags.Type<'uint32'>;
        sale_channel_id?: number & tags.Type<'uint32'>;
        price_book_id?: number & tags.Type<'uint32'>;
        billing_address_id?: number & tags.Type<'uint32'>;
        shipping_address_id?: number & tags.Type<'uint32'>;
        draf_order_id?: number & tags.Type<'uint32'>;
        partner_id?: number & tags.Type<'uint32'>;
        warehouse_id: number & tags.Type<'uint32'>;
        currency_code?: string | null;
        email?: string | null;
        phone?: string | null;
        note?: string | null;
        uuid?: (string & tags.Format<'uuid'>) | null;
        description?: string | null;
        tags?: string | null;
        total?: number;
        totalPrice?: number;
        totalWeight?: number;
        subTotal?: number;
        shippingTotal?: number;
        discountTotal?: number;
        rawDiscountTotal?: number;
        taxTotal?: number;
        originTotal?: number;
        paidTotal?: number;
        refundedAmount?: number;
        refundedTotal?: number;
        totalGuests?: number;
        customerAcceptMarketing?: boolean;
        taxesIncluded?: boolean;
        refundable?: boolean;
        completedAt?: (string & tags.Format<'date-time'>) | null;
        confirmedAt?: (string & tags.Format<'date-time'>) | null;
        processedAt?: (string & tags.Format<'date-time'>) | null;
        canceledAt?: (string & tags.Format<'date-time'>) | null;
        cancelReason?: string | null;
        confirmationCode?: string | null;
        paymentGatewayName?: string | null;
        clientIp?: string | null;
        discountCode?: string | null;
        sourceIdentifier?: string | null;
        status?: OrderStatus;
        codStatus?: CODStatus;
        orderProcessingStatus?: OrderProcessingStatus;
        fulfillmentStatus?: OrderFulfillmentStatus;
        financialStatus?: OrderFinancialStatus;
        userId?: string;
    }
    interface ICreateOrderKafka extends ICreateOrder {
        shop_id: number & tags.Type<'uint32'>;
    }
    interface IUpdateOrder {
        billing_address_id?: number & tags.Type<'uint32'>;
        shipping_address_id?: number & tags.Type<'uint32'>;
        price_book_id?: number & tags.Type<'uint32'>;
        email?: string;
        phone?: string;
        note?: string;
        description?: string;
        tags?: string;
        total?: number;
        totalPrice?: number;
        totalWeight?: number;
        subTotal?: number;
        shippingTotal?: number;
        discountTotal?: number;
        rawDiscountTotal?: number;
        taxTotal?: number;
        originTotal?: number;
        paidTotal?: number;
        refundedAmount?: number;
        refundedTotal?: number;
        totalGuests?: number;
        customerAcceptMarketing?: boolean;
        taxesIncluded?: boolean;
        refundable?: boolean;
        completedAt?: (string & tags.Format<'date-time'>) | null;
        confirmedAt?: (string & tags.Format<'date-time'>) | null;
        processedAt?: (string & tags.Format<'date-time'>) | null;
        canceledAt?: (string & tags.Format<'date-time'>) | null;
        cancelReason?: string | null;
        confirmationCode?: string | null;
        paymentGatewayName?: string | null;
        clientIp?: string | null;
        discountCode?: string | null;
        sourceIdentifier?: string | null;
        status?: OrderStatus;
        codStatus?: CODStatus;
        orderProcessingStatus?: OrderProcessingStatus;
        fulfillmentStatus?: OrderFulfillmentStatus;
        financialStatus?: OrderFinancialStatus;
        userId?: string;
    }
    interface IDetailOrderResponse extends BaseResponse {
        shop_id: number | string | null;
        branch_id: number | string | null;
        staff_id: number | string | null;
        pos_session_id?: number | string | null;
        sale_channel_id?: number | string | null;
        price_book_id?: number | string | null;
        billing_address_id?: number | string | null;
        shipping_address_id?: number | string | null;
        draf_order_id?: number | string | null;
        partner_id?: null | number | string;
        warehouse_id?: null | number | string;
        idempotency_key: string | number;
        code?: string | null;
        uuid?: string | null;
        currency_code?: string | null;
        email?: string | null;
        phone?: string | null;
        note?: string | null;
        description?: string | null;
        tags?: string | null;
        total?: number | string;
        totalPrice?: number | string;
        totalWeight?: number | string;
        subTotal?: number | string;
        shippingTotal?: number | string;
        discountTotal?: number | string;
        rawDiscountTotal?: number | string;
        taxTotal?: number | string;
        originTotal?: number | string;
        paidTotal?: number | string;
        refundedAmount?: number | string;
        refundedTotal?: number | string;
        totalGuests?: number | string;
        customerAcceptMarketing?: boolean;
        taxesIncluded?: boolean;
        refundable?: boolean;
        completedAt?: Date | string | null;
        confirmedAt?: Date | string | null;
        processedAt?: Date | string | null;
        canceledAt?: Date | string | null;
        cancelReason?: string | null;
        confirmationCode?: string | null;
        paymentGatewayName?: string | null;
        clientIp?: string | null;
        discountCode?: string | null;
        sourceIdentifier?: string | null;
        status: string;
        codStatus?: string;
        orderProcessingStatus?: string;
        fulfillmentStatus?: string;
        financialStatus?: string;
        lineItems?: ILineItem.IDetailLineItemResponse[] | null;
        drafOrder?: IDrafOrder.IDetailDrafOrderResponse | null;
        tableReservations?: ITableReservation.IDetailTableReservationResponse[] | null;
    }
}
